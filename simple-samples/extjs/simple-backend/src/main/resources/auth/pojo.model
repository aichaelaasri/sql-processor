package org.sample.model.auth {

    import  ch.ralscha.extdirectspring.generator.Model
    import  ch.ralscha.extdirectspring.generator.ModelAssociation
    import  ch.ralscha.extdirectspring.generator.ModelAssociationType
    import  ch.ralscha.extdirectspring.generator.ModelField
    import  com.fasterxml.jackson.annotation.JsonIgnore
    import  com.fasterxml.jackson.databind.annotation.JsonSerialize
    import  javax.validation.constraints.NotNull
    import  javax.validation.constraints.Past
    import  org.hibernate.validator.constraints.NotBlank
    import  org.sample.web.util.DMYDateTimeSerializer


    #Standard
    final @Model(value = "SimpleWeb.model.AuthRole", paging = true, readMethod = "simpleService.loadAuthRoles")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,name,description,version)
    #Pojo AuthRole {
        #PrimaryKey #Index
        #Attr Long id
        #Attribute
        final @NotBlank
        #Required
        #Attr String name
        #IsDef
        #Attr String description
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
    }

    #Standard
    final @Model(value = "SimpleWeb.model.AuthUser", paging = true, readMethod = "simpleService.loadAuthUsers")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,username,password,name,email,lastLogin,version)
    #Pojo AuthUser {
        #PrimaryKey #Index
        #Attr Long id
        #Attribute
        final @NotBlank
        #Required #Index
        #Attr String username
        #IsDef
        #Attr String password
        #Attribute
        final @NotBlank
        #Required
        #Attr String name
        #IsDef
        #Attr String email
        #Attribute
        final @ModelField(dateFormat = "d.m.Y")
        #Attribute
        final @Past
        #Getter
        final @JsonSerialize(using = typeof ( DMYDateTimeSerializer ))
        #Setter
        final @JsonSerialize(using = typeof ( DMYDateTimeSerializer ))
        #IsDef
        #Attr java.util.Date lastLogin
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
        #Attribute
        final @ModelAssociation(value = ModelAssociationType . HAS_MANY, model = typeof ( UserRole ))
        #ToInit
        #Attr java.util.List <UserRole> userRoles
    }

    #Standard
    final @Model(value = "SimpleWeb.model.UserRole", paging = true, readMethod = "simpleService.loadUserRoles")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,authUserId,version)
    #Pojo UserRole {
        #PrimaryKey #Index
        #Attr Long id
        #Required #Index
        #Attr Long authUserId
        #Attribute
        final @ModelAssociation(value = ModelAssociationType . HAS_ONE, model = typeof ( AuthRole ))
        #ToInit #Required #Index #IsPojo
        #Attr AuthRole authRole
        #Version
        #Attr Integer version
    }

    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,authUserId,lastAccess)
    #Pojo UserSession {
        #PrimaryKey #Index
        #Attr Long id
        #Required #Index
        #Attr Long authUserId
        #Required
        #Attr java.util.Date lastAccess
    }

// Model statistics
// Tables=4
// Columns=18
// Primary Keys=4
// Exports=3
// Imports=3
// Indexes=11
// Check Constraints=0
// Procedures=0
// Procedures Columns=0
// Functions=0
// Functions Columns=0
}