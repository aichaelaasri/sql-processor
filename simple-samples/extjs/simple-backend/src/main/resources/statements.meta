
INSERT_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  insert into %%CONTACT (%ID, %PERSON_ID, %CTYPE, %ADDRESS, %PHONE_NUMBER, %VERSION, %COUNTRY_CODE)
  {= values (:id(seq=SIMPLE_SEQUENCE), :personId, :ctype, :address, :phoneNumber, :version, :country.code) }
;

GET_CONTACT(CRUD,in=Contact,out=Contact,tab=contact=c,tab=country=c1)=
  select %c.ID @id(id), %c.PERSON_ID @personId, %c.CTYPE @ctype, %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber, %c.VERSION @version, %c.COUNTRY_CODE @country.code(id), %c.COUNTRY_CODE @countryCode
         {? :country(call=toInit) | , %c1.CODE @country.code, %c1.NAME @country.name }
  from %%CONTACT c
  {? :country(call=toInit) | left join %%COUNTRY c1 on %c.COUNTRY_CODE = %c1.CODE }
  {= where
    {& %c.ID ::= :id }
    {& %c.PERSON_ID ::= :personId }
    {& %c.CTYPE ::= :ctype }
    {& %c.ADDRESS ::= :address }
    {& %c.PHONE_NUMBER ::= :phoneNumber }
    {& %c.COUNTRY_CODE ::= :country.code }
  }
;

UPDATE_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  update %%CONTACT
  {= set
    { ,%PERSON_ID = :personId(call=isDef) }
    { ,%CTYPE = :ctype(call=isDef) }
    { ,%ADDRESS = :address(call=isDef) }
    { ,%PHONE_NUMBER = :phoneNumber(call=isDef) }
    { ,%VERSION = %VERSION + 1 }
    { ,%COUNTRY_CODE = :country.code(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_CONTACT(CRUD,in=Contact,out=Contact,tab=contact)=
  delete from %%CONTACT
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_CONTACT(QRY,in=Contact,out=Contact,tab=contact=c,tab=country=c1)=
  select %c.ID @id(id), %c.PERSON_ID @personId, %c.CTYPE @ctype, %c.ADDRESS @address, %c.PHONE_NUMBER @phoneNumber, %c.VERSION @version, %c.COUNTRY_CODE @country.code(id), %c.COUNTRY_CODE @countryCode
         {? :country(call=toInit) | , %c1.CODE @country.code, %c1.NAME @country.name }
  from %%CONTACT c
  {? :country(call=toInit) | left join %%COUNTRY c1 on %c.COUNTRY_CODE = %c1.CODE }
  {= where
    {& %c.ID ::= :id }
    {& %c.PERSON_ID ::= :personId }
    {& UPPER(%c.CTYPE) like :+ctype }
    {& UPPER(%c.ADDRESS) like :+address }
    {& %c.PHONE_NUMBER ::= :phoneNumber }
    {& UPPER(%c.COUNTRY_CODE) like :+country.code }
  }
  {#ID order by %c.ID }
  {#PERSON_ID order by %c.PERSON_ID }
  {#COUNTRY order by %c.COUNTRY_CODE }
;

INSERT_COUNTRY(CRUD,in=Country,out=Country,tab=country)=
  insert into %%COUNTRY (%ID, %CODE, %NAME)
  {= values (:id(seq=SIMPLE_SEQUENCE), :code, :name) }
;

GET_COUNTRY(CRUD,in=Country,out=Country,tab=country)=
  select %ID @id(id), %CODE @code, %NAME @name
  from %%COUNTRY
  {= where
    {& %ID ::= :id }
    {& %CODE ::= :code }
    {& %NAME ::= :name }
  }
;

UPDATE_COUNTRY(CRUD,in=Country,out=Country,tab=country)=
  update %%COUNTRY
  {= set
    { ,%CODE = :code(call=isDef) }
    { ,%NAME = :name(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_COUNTRY(CRUD,in=Country,out=Country,tab=country)=
  delete from %%COUNTRY
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_COUNTRY(QRY,IOPT=SURROUND_QUERY_MIN_LEN=1,in=Country,out=Country,tab=country)=
  select %ID @id(id), %CODE @code, %NAME @name
  from %%COUNTRY
  {= where
    {& %ID ::= :id }
    {& UPPER(%CODE) like :+code }
    {& UPPER(%NAME) like :+name }
  }
  {#ID order by %ID }
  {#CODE order by %CODE }
  {#NAME order by %NAME }
;

INSERT_PERSON(CRUD,in=Person,out=Person,tab=person)=
  insert into %%PERSON (%ID, %FIRST_NAME, %LAST_NAME, %DATE_OF_BIRTH, %GENDER, %SSN, %VERSION)
  {= values (:id(seq=SIMPLE_SEQUENCE), :firstName, :lastName, :dateOfBirth, :gender, :ssn, :version) }
;

GET_PERSON(CRUD,in=Person,out=Person,tab=person=p,tab=contact=c,tab=relative=r)=
  select %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.GENDER @gender, %p.SSN @ssn, %p.VERSION @version
         {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.personId, %c.CTYPE @contacts.ctype, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber, %c.VERSION @contacts.version, %c.COUNTRY_CODE @contacts.country.code, %c.COUNTRY_CODE @contacts.countryCode }
         {? :relatives(call=toInit) | , %r.ID @relatives.id(id), %r.PERSON_ID @relatives.personId, %r.REL_PERSON_ID @relatives.relPerson.id, %r.RTYPE @relatives.rtype }
  from %%PERSON p
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {? :relatives(call=toInit) | left join %%RELATIVE r on %p.ID = %r.REL_PERSON_ID }
  {= where
    {& %p.ID ::= :id }
    {& %p.FIRST_NAME ::= :firstName }
    {& %p.LAST_NAME ::= :lastName }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& %p.GENDER ::= :gender }
    {& %p.SSN ::= :ssn }
  }
;

UPDATE_PERSON(CRUD,in=Person,out=Person,tab=person)=
  update %%PERSON
  {= set
    { ,%FIRST_NAME = :firstName(call=isDef) }
    { ,%LAST_NAME = :lastName(call=isDef) }
    { ,%DATE_OF_BIRTH = :dateOfBirth(call=isDef) }
    { ,%GENDER = :gender(call=isDef) }
    { ,%SSN = :ssn(call=isDef) }
    { ,%VERSION = %VERSION + 1 }
  }
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

DELETE_PERSON(CRUD,in=Person,out=Person,tab=person)=
  delete from %%PERSON
  {= where
    {& %ID = :id(!empty) }
    {& %VERSION = :version(!empty) }
  }
;

SELECT_PERSON(QRY,in=Person,out=Person,tab=person=p,tab=contact=c,tab=relative=r)=
  select %p.ID @id(id), %p.FIRST_NAME @firstName, %p.LAST_NAME @lastName, %p.DATE_OF_BIRTH @dateOfBirth, %p.GENDER @gender, %p.SSN @ssn, %p.VERSION @version
         {? :contacts(call=toInit) | , %c.ID @contacts.id(id), %c.PERSON_ID @contacts.personId, %c.CTYPE @contacts.ctype, %c.ADDRESS @contacts.address, %c.PHONE_NUMBER @contacts.phoneNumber, %c.VERSION @contacts.version, %c.COUNTRY_CODE @contacts.country.code, %c.COUNTRY_CODE @contacts.countryCode }
         {? :relatives(call=toInit) | , %r.ID @relatives.id(id), %r.PERSON_ID @relatives.personId, %r.REL_PERSON_ID @relatives.relPerson.id, %r.RTYPE @relatives.rtype }
  from %%PERSON p
  {? :contacts(call=toInit) | left join %%CONTACT c on %p.ID = %c.PERSON_ID }
  {? :relatives(call=toInit) | left join %%RELATIVE r on %p.ID = %r.REL_PERSON_ID }
  {= where
    {& %p.ID ::= :id }
    {& UPPER(%p.FIRST_NAME) like :+firstName }
    {& UPPER(%p.LAST_NAME) like :+lastName }
    {& %p.DATE_OF_BIRTH ::= :dateOfBirth }
    {& UPPER(%p.GENDER) like :+gender }
    {& UPPER(%p.SSN) like :+ssn }
  }
  {#ID order by %p.ID }
  {#LAST_NAME order by %p.LAST_NAME }
;

INSERT_RELATIVE(CRUD,in=Relative,out=Relative,tab=relative)=
  insert into %%RELATIVE (%ID, %PERSON_ID, %REL_PERSON_ID, %RTYPE)
  {= values (:id(seq=SIMPLE_SEQUENCE), :personId, :relPerson.id, :rtype) }
;

GET_RELATIVE(CRUD,in=Relative,out=Relative,tab=relative=r,tab=person=p)=
  select %r.ID @id(id), %r.PERSON_ID @personId, %r.REL_PERSON_ID @relPerson.id(id), %r.RTYPE @rtype
         {? :relPerson(call=toInit) | , %p.FIRST_NAME @relPerson.firstName, %p.LAST_NAME @relPerson.lastName, %p.DATE_OF_BIRTH @relPerson.dateOfBirth, %p.GENDER @relPerson.gender, %p.SSN @relPerson.ssn, %p.VERSION @relPerson.version }
  from %%RELATIVE r
  {? :relPerson(call=toInit) | left join %%PERSON p on %r.REL_PERSON_ID = %p.ID }
  {= where
    {& %r.ID ::= :id }
    {& %r.PERSON_ID ::= :personId }
    {& %r.REL_PERSON_ID ::= :relPerson.id }
    {& %r.RTYPE ::= :rtype }
  }
;

UPDATE_RELATIVE(CRUD,in=Relative,out=Relative,tab=relative)=
  update %%RELATIVE
  {= set
    { ,%PERSON_ID = :personId(call=isDef) }
    { ,%REL_PERSON_ID = :relPerson.id(call=isDef) }
    { ,%RTYPE = :rtype(call=isDef) }
  }
  {= where
    {& %ID = :id(!empty) }
  }
;

DELETE_RELATIVE(CRUD,in=Relative,out=Relative,tab=relative)=
  delete from %%RELATIVE
  {= where
    {& %ID = :id(!empty) }
  }
;

SELECT_RELATIVE(QRY,in=Relative,out=Relative,tab=relative=r,tab=person=p)=
  select %r.ID @id(id), %r.PERSON_ID @personId, %r.REL_PERSON_ID @relPerson.id(id), %r.RTYPE @rtype
         {? :relPerson(call=toInit) | , %p.FIRST_NAME @relPerson.firstName, %p.LAST_NAME @relPerson.lastName, %p.DATE_OF_BIRTH @relPerson.dateOfBirth, %p.GENDER @relPerson.gender, %p.SSN @relPerson.ssn, %p.VERSION @relPerson.version }
  from %%RELATIVE r
  {? :relPerson(call=toInit) | left join %%PERSON p on %r.REL_PERSON_ID = %p.ID }
  {= where
    {& %r.ID ::= :id }
    {& %r.PERSON_ID ::= :personId }
    {& %r.REL_PERSON_ID ::= :relPerson.id }
    {& UPPER(%r.RTYPE) like :+rtype }
  }
  {#ID order by %r.ID }
  {#PERSON_ID order by %r.PERSON_ID }
  {#REL_PERSON order by %r.REL_PERSON_ID }
;

// Model statistics
// Tables=4
// Columns=21
// Primary Keys=4
// Exports=4
// Imports=4
// Indexes=12
// Check Constraints=3
// Procedures=0
// Procedures Columns=0
// Functions=0
// Functions Columns=0
