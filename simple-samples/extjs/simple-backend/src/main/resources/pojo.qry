package org.sample.model.person {

  import ch.ralscha.extdirectspring.generator.ModelType
  import org.hibernate.validator.constraints.NotBlank
  import javax.validation.constraints.NotNull
  import org.springframework.format.annotation.DateTimeFormat
  import com.fasterxml.jackson.databind.annotation.JsonSerialize
  import ch.ralscha.extdirectspring.generator.ModelAssociation
  import ch.ralscha.extdirectspring.generator.ModelField
  import org.sample.web.util.DMYDateSerializer
  import ch.ralscha.extdirectspring.generator.Model
  import javax.validation.constraints.Past
  import com.fasterxml.jackson.annotation.JsonIgnore
  import ch.ralscha.extdirectspring.generator.ModelAssociationType

  #Serializable(1)
  enum ContactCtype {
    #Values(HOME = "0",BUSINESS = "1",ABROAD = "2")
    value :java.lang.String
  }

  #Serializable(1)
  enum PersonGender {
    #Values(MALE = "M",FEMALE = "F",UNKNOWN = "0")
    value :java.lang.String
  }

  #Serializable(1)
  enum RelativeRtype {
    #Values(FATHER = "F",MOTHER = "M",SON = "S",DAUGHTER = "D",HUSBAND = "H",WIFE = "W",BROTHER = "B",SISTER = "I")
    value :java.lang.String
  }

  #Standard
  @Model(value = "SimpleWeb.model.Contact",paging = true,readMethod = "simpleService.loadContacts")
  #Static
  @JsonIgnore
  #Conflict
  @JsonIgnore
  #Operators
  #Serializable(1)
  #Equals(id)
  #HashCode(id)
  #ToString(id,phoneNumber,address,countryCode,ctype,personId,version)
  pojo Contact {
    #PrimaryKey
    #Index(1)
    id :java.lang.Long
    #Required
    #Index(2)
    personId :java.lang.Long
    @ModelField(type = STRING :ModelType)
    @NotNull
    #Required
    ctype ContactCtype
    @NotBlank
    #Required
    address :java.lang.String
    #IsDef
    phoneNumber :java.lang.String
    @NotNull
    #Version
    version :java.lang.Integer
    #ToInit
    #Required
    #Index(3)
    #UpdateCol(code,countryCode)
    country Country
    #CreateCol(country,code)
    countryCode : java.lang.String
  }

  #Standard
  @Model(value = "SimpleWeb.model.Country",paging = true,readMethod = "simpleService.loadCountries")
  #Static
  @JsonIgnore
  #Conflict
  @JsonIgnore
  #Operators
  #Serializable(1)
  #Equals(id)
  #HashCode(id)
  #ToString(id,name,code)
  pojo Country {
    #PrimaryKey
    #Index(1)
    id :java.lang.Long
    #Required
    #Index(3)
    code :java.lang.String
    #IsDef
    #Index(4)
    name :java.lang.String
  }

  #Standard
  @Model(value = "SimpleWeb.model.Person",paging = true,readMethod = "simpleService.loadPeople")
  #Static
  @JsonIgnore
  #Conflict
  @JsonIgnore
  #Operators
  #Serializable(1)
  #Equals(id)
  #HashCode(id)
  #ToString(dateOfBirth,id,lastName,ssn,gender,firstName,version)
  pojo Person {
    #PrimaryKey
    #Index(1)
    id :java.lang.Long
    @NotBlank
    #Required
    firstName :java.lang.String
    @NotBlank
    #Required
    #Index(2)
    lastName :java.lang.String
    #Attribute
    @ModelField(dateFormat = "d.m.Y")
    #Attribute
    @Past
    #Attribute
    @DateTimeFormat(pattern = "dd.MM.yyyy")
    #Getter
    @JsonSerialize(using = class :DMYDateSerializer)
    #Setter
    @JsonSerialize(using = class :DMYDateSerializer)
    #IsDef
    dateOfBirth :java.util.Date
    @ModelField(type = STRING :ModelType)
    @NotNull
    #Required
    gender PersonGender
    #IsDef
    ssn :java.lang.String
    @NotNull
    #Version
    version :java.lang.Integer
    @ModelAssociation(value = HAS_MANY :ModelAssociationType,model = class Relative)
    #ToInit
    relatives :java.util.List <Relative>
    @ModelAssociation(value = HAS_MANY :ModelAssociationType,model = class Contact)
    #ToInit
    contacts :java.util.List <Contact>
  }

  #Standard
  @Model(value = "SimpleWeb.model.Relative")
  #Static
  @JsonIgnore
  #Conflict
  @JsonIgnore
  #Operators
  #Serializable(1)
  #Equals(id)
  #HashCode(id)
  #ToString(id,rtype,personId,version)
  pojo Relative {
    #PrimaryKey
    #Index(1)
    id :java.lang.Long
    #Required
    #Index(2)
    personId :java.lang.Long
    @ModelAssociation(value = HAS_ONE :ModelAssociationType,model = class Person)
    #ToInit
    #Required
    #Index(3)
    relPerson Person
    @ModelField(type = STRING :ModelType)
    @NotNull
    #Required
    rtype RelativeRtype
    @NotNull
    #IsDef
    version :java.lang.Integer
  }
}


package org.sample.web.form {
 
  #Serializable(1)
  pojo PersonForm extends Person {
    dateOfBirthFrom : java.util.Date
    dateOfBirthTo : java.util.Date
  }
	
  #Serializable(1)
  pojo CountHolder {
    count : int 
  }
}