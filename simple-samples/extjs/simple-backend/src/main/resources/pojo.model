package org.sample.model.person {

    import  ch.ralscha.extdirectspring.generator.Model
    import  ch.ralscha.extdirectspring.generator.ModelAssociation
    import  ch.ralscha.extdirectspring.generator.ModelAssociationType
    import  ch.ralscha.extdirectspring.generator.ModelField
    import  ch.ralscha.extdirectspring.generator.ModelType
    import  com.fasterxml.jackson.annotation.JsonIgnore
    import  com.fasterxml.jackson.databind.annotation.JsonSerialize
    import  javax.validation.constraints.NotNull
    import  javax.validation.constraints.Past
    import  org.hibernate.validator.constraints.NotBlank
    import  org.sample.web.util.DMYDateSerializer
    import  org.springframework.format.annotation.DateTimeFormat


    #Serializable(1)
    #Enum ContactCtype {
        #Values(ABROAD = "2",BUSINESS = "1",HOME = "0")
        #Attr String value
    }

    #Serializable(1)
    #Enum PersonGender {
        #Values(FEMALE = "F",MALE = "M",UNKNOWN = "0")
        #Attr String value
    }

    #Serializable(1)
    #Enum RelativeRtype {
        #Values(BROTHER = "B",DAUGHTER = "D",FATHER = "F",HUSBAND = "H",MOTHER = "M",SISTER = "I",SON = "S",WIFE = "W")
        #Attr String value
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Contact", paging = true, readMethod = "simpleService.loadContacts")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,personId,ctype,address,phoneNumber,version,countryCode)
    #Pojo Contact {
        #PrimaryKey #Index
        #Attr Long id
        #Required #Index
        #Attr Long personId
        #Attribute
        final @ModelField(type = ModelType . STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr ContactCtype ctype
        #Attribute
        final @NotBlank
        #Required
        #Attr String address
        #IsDef
        #Attr String phoneNumber
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
        #ToInit #Required #Index #IsPojo #UpdateCol(code,countryCode)
        #Attr Country country
        #CreateCol(country,code)
        #Attr String countryCode
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Country", paging = true, readMethod = "simpleService.loadCountries")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,code,name)
    #Pojo Country {
        #PrimaryKey #Index
        #Attr Long id
        #Required #Index
        #Attr String code
        #IsDef #Index
        #Attr String name
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Person", paging = true, readMethod = "simpleService.loadPeople")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,firstName,lastName,dateOfBirth,gender,ssn,version)
    #Pojo Person {
        #PrimaryKey #Index
        #Attr Long id
        #Attribute
        final @NotBlank
        #Required
        #Attr String firstName
        #Attribute
        final @NotBlank
        #Required #Index
        #Attr String lastName
        #Attribute
        final @ModelField(dateFormat = "d.m.Y")
        #Attribute
        final @Past
        #Attribute
        final @DateTimeFormat(pattern = "dd.MM.yyyy")
        #Getter
        final @JsonSerialize(using = typeof ( DMYDateSerializer ))
        #Setter
        final @JsonSerialize(using = typeof ( DMYDateSerializer ))
        #IsDef
        #Attr java.util.Date dateOfBirth
        #Attribute
        final @ModelField(type = ModelType . STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr PersonGender gender
        #IsDef
        #Attr String ssn
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
        #Attribute
        final @ModelAssociation(value = ModelAssociationType . HAS_MANY, model = typeof ( Contact ))
        #ToInit
        #Attr java.util.List <Contact> contacts
        #Attribute
        final @ModelAssociation(value = ModelAssociationType . HAS_MANY, model = typeof ( Relative ))
        #ToInit
        #Attr java.util.List <Relative> relatives
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Relative")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,personId,rtype,version)
    #Pojo Relative {
        #PrimaryKey #Index
        #Attr Long id
        #Required #Index
        #Attr Long personId
        #Attribute
        final @ModelAssociation(value = ModelAssociationType . HAS_ONE, model = typeof ( Person ))
        #ToInit #Required #Index #IsPojo
        #Attr Person relPerson
        #Attribute
        final @ModelField(type = ModelType . STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr RelativeRtype rtype
        #Attribute
        final @NotNull
        #IsDef
        #Attr Integer version
    }

// Model statistics
// Tables=4
// Columns=21
// Primary Keys=4
// Exports=4
// Imports=4
// Indexes=12
// Check Constraints=3
// Procedures=0
// Procedures Columns=0
// Functions=0
// Functions Columns=0
}

package org.sample.web.form {

	#Serializable(1)
	#Pojo PersonForm extends org.sample.model.person.Person {
		#Attr java.util.Date dateOfBirthFrom
		#Attr java.util.Date dateOfBirthTo
	}

	#Serializable(1)
	#Pojo CountHolder {
		#Attr int count
	}
}