package org.sample.model.person {

    import ch.ralscha.extdirectspring.generator.ModelType
    import org.hibernate.validator.constraints.NotBlank
    import javax.validation.constraints.NotNull
    import org.springframework.format.annotation.DateTimeFormat
    import com.fasterxml.jackson.databind.annotation.JsonSerialize
    import ch.ralscha.extdirectspring.generator.ModelAssociation
    import ch.ralscha.extdirectspring.generator.ModelField
    import org.sample.web.util.DMYDateSerializer
    import ch.ralscha.extdirectspring.generator.Model
    import javax.validation.constraints.Past
    import com.fasterxml.jackson.annotation.JsonIgnore
    import ch.ralscha.extdirectspring.generator.ModelAssociationType


    #Serializable(1)
    #Enum ContactCtype {
        #Values(HOME = "0",BUSINESS = "1",ABROAD = "2")
        #Attr String value
    }

    #Serializable(1)
    #Enum PersonGender {
        #Values(MALE = "M",FEMALE = "F",UNKNOWN = "0")
        #Attr String value
    }

    #Serializable(1)
    #Enum RelativeRtype {
        #Values(FATHER = "F",MOTHER = "M",SON = "S",DAUGHTER = "D",HUSBAND = "H",WIFE = "W",BROTHER = "B",SISTER = "I")
        #Attr String value
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Contact",paging = true,readMethod = "simpleService.loadContacts")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,phoneNumber,address,countryCode,ctype,personId,version)
    #Pojo Contact {
        #PrimaryKey #Index(1)
        #Attr Long id
        #Required #Index(2)
        #Attr Long personId
        #Attribute
        final @ModelField(type = ModelType.STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr ContactCtype ctype
        #Attribute
        final @NotBlank
        #Required
        #Attr String address
        #IsDef
        #Attr String phoneNumber
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
        #ToInit #Required #Index(3) #UpdateCol(code,countryCode)
        #Attr Country country
        #CreateCol(country,code)
        #Attr String countryCode
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Country",paging = true,readMethod = "simpleService.loadCountries")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,name,code)
    #Pojo Country {
        #PrimaryKey #Index(1)
        #Attr Long id
        #Required #Index(3)
        #Attr String code
        #IsDef #Index(4)
        #Attr String name
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Person",paging = true,readMethod = "simpleService.loadPeople")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(dateOfBirth,id,lastName,ssn,gender,firstName,version)
    #Pojo Person {
        #PrimaryKey #Index(1)
        #Attr Long id
        #Attribute
        final @NotBlank
        #Required
        #Attr String firstName
        #Attribute
        final @NotBlank
        #Required #Index(2)
        #Attr String lastName
        #Attribute
        final @ModelField(dateFormat = "d.m.Y")
        #Attribute
        final @Past
        #Attribute
        final @DateTimeFormat(pattern = "dd.MM.yyyy")
        #Getter
        final @JsonSerialize(using = typeof(DMYDateSerializer))
        #Setter
        final @JsonSerialize(using = typeof(DMYDateSerializer))
        #IsDef
        #Attr java.util.Date dateOfBirth
        #Attribute
        final @ModelField(type = ModelType.STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr PersonGender gender
        #IsDef
        #Attr String ssn
        #Attribute
        final @NotNull
        #Version
        #Attr Integer version
        #Attribute
        final @ModelAssociation(value = ModelAssociationType.HAS_MANY,model = typeof(Relative))
        #ToInit
        #Attr java.util.List <Relative> relatives
        #Attribute
        final @ModelAssociation(value = ModelAssociationType.HAS_MANY,model = typeof(Contact))
        #ToInit
        #Attr java.util.List <Contact> contacts
    }

    #Standard
    final @Model(value = "SimpleWeb.model.Relative")
    #Static
    final @JsonIgnore
    #Conflict
    final @JsonIgnore
    #Operators #Serializable(1) #Equals(id) #HashCode(id) #ToString(id,rtype,personId,version)
    #Pojo Relative {
        #PrimaryKey #Index(1)
        #Attr Long id
        #Required #Index(2)
        #Attr Long personId
        #Attribute
        final @ModelAssociation(value = ModelAssociationType.HAS_ONE,model = typeof(Person))
        #ToInit #Required #Index(3)
        #Attr Person relPerson
        #Attribute
        final @ModelField(type = ModelType.STRING)
        #Attribute
        final @NotNull
        #Required
        #Attr RelativeRtype rtype
        #Attribute
        final @NotNull
        #IsDef
        #Attr Integer version
    }
}

package org.sample.web.form {
 
  #Serializable(1)
  #Pojo PersonForm extends org.sample.model.person.Person {
    #Attr java.util.Date dateOfBirthFrom
    #Attr java.util.Date dateOfBirthTo
  }
	
  #Serializable(1)
  #Pojo CountHolder {
    #Attr int count
  }
}