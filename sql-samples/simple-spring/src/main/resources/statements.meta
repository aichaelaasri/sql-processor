SEQ1(OPT)=call NEXT VALUE FOR SIMPLE_SEQUENCE;
SEL1(OPT)=call identity();

ALL_PEOPLE(QRY,in=person,out=person)=
  select ID @id, NAME @name
  from PERSON
  {= where
   {& id=:id}
   {& UPPER(name)=:+name}
  }
  {#ID order by ID}
  {#NAME order by NAME}
;

LIKE_PEOPLE(QRY,in=person,out=person)=
  select ID @id, NAME @name
  from PERSON
  {= where
   {& id=:id}
   {& UPPER(name) like :+name}
  }
  {#ID order by ID}
  {#NAME order by NAME}
;

INSERT_PERSON(CRUD,in=person)=
  insert into PERSON (id, name)
  {= values (:id(type=long,seq=SEQ1), :name) }
;
  
INSERT_PERSON2(CRUD,in=person)=
  insert into PERSON (name)
  {= values (:id(type=long,idsel), :name) }
;

GET_PERSON(CRUD,in=person,out=person)=
  select @id, @name
  from PERSON
  {= where id=:id}
;

UPDATE_PERSON(CRUD,in=person)=
  update PERSON
  {= set name = :name}
  {= where {& id = :id(type=long,notnull)}}
;
  
DELETE_PERSON(CRUD,in=person)=
  delete from PERSON
  {= where {& id = :id(type=long,notnull)}}
;

INSERT_CONTACT(CRUD,in=contact)=
  insert into CONTACT (id, person_id, address)
  {= values (:id(type=long,seq=SEQ1), :personId, :address) }
;

ALL_PEOPLE_AND_CONTACTS(QRY,in=person,out=person)=
  select p.ID @id(type=long,id), p.NAME @name, c.ID @contacts.id(type=long,id), p.ID @contacts.personId, c.ADDRESS @contacts.address
  from PERSON p left join CONTACT c on p.ID = c.PERSON_ID
  {= where
   {& id=:id}
   {& UPPER(name) like :+name}
  }
  {#NAME_ADDRESS order by p.NAME, c.ADDRESS}
;

INSERT_MEDIA(CRUD,in=media)=
  insert into MEDIA (id, title)
  {= values (:id(type=long,seq=SEQ1), :title) }
;

INSERT_MOVIE(CRUD,in=movie)=
  insert into MOVIE (media_id, urlimdb, playlength)
  {= values (:id, :urlIMDB, :playLength) }
;

INSERT_BOOK(CRUD,in=book)=
  insert into BOOK (media_id, isbn)
  {= values (:id, :isbn) }
;

CREATE_LIBRARY(CRUD,in=personLibrary)=
  insert into PERSON_LIBRARY (id, person_id, media_id)
  {= values (:id(type=long,seq=SEQ1), :personId, :mediaId) }
;

ALL_PEOPLE_LIBRARY(QRY,in=library,out=person)=
  select p.ID @id(type=long,id), p.NAME @name, mo.MEDIA_ID @library(gtype=movie)id(type=long,id), bk.MEDIA_ID @library(gtype=book)id(type=long,id),
  m.TITLE @library.title, mo.URLIMDB @library.urlIMDB, mo.PLAYLENGTH @library.playLength, bk.ISBN @library.isbn
  from PERSON p left join PERSON_LIBRARY l on p.ID = l.PERSON_ID
  left join MEDIA m on m.ID = l.MEDIA_ID
  left join MOVIE mo on mo.MEDIA_ID = m.ID
  left join BOOK bk on bk.MEDIA_ID = m.ID
  {= where
   {& id=:id}
   {& UPPER(name) like :+name}
  }
  {#NAME_TITLE order by p.NAME, m.TITLE}
;

INSERT_CONTACT_CUSTOM(CRUD,in=contact)=
  insert into CONTACT (id, person_id, address, phone_number)
  {= values (:id(type=long,seq=SEQ1), :personId, :address, :homePhone(type=phone)) }
;

ALL_PEOPLE_AND_CONTACTS_CUSTOM(QRY,in=contact,out=person)=
  select p.ID @id(type=long,id), p.NAME @name, c.ID @contacts.id(type=long,id), p.ID @contacts.personId, c.ADDRESS @contacts.address,
  c.PHONE_NUMBER @contacts.homePhone(type=phone)
  from PERSON p left join CONTACT c on p.ID = c.PERSON_ID
  {= where
   {& c.ID=:id}
   {& c.PHONE_NUMBER = :homePhone(type=phone)}
  }
  {#NAME_ADDRESS order by p.NAME, c.ADDRESS}
;
  
INSERT_LIBRARY(CRUD,in=library)=
  insert into LIBRARY (id, name)
  {= values (:id(type=long,seq=SEQ1), :name) }
;
  
INSERT_SUBSCRIBER(CRUD,in=subscriber)=
  insert into SUBSCRIBER (id, library, name)
  {= values (:id(type=long,seq=SEQ1), :library.id, :name) }
;
  
INSERT_CREDIT_CARD(CRUD,in=creditCard)=
  insert into BILLING_DETAILS (id, subscriber, type, cc_number)
  {= values (:id(type=long,seq=SEQ1), :subscriber.id, 'CC', :number) }
;
  
INSERT_BANK_ACCOUNT(CRUD,in=bankAccount)=
  insert into BILLING_DETAILS (id, subscriber, type, ba_account)
  {= values (:id(type=long,seq=SEQ1), :subscriber.id, 'BA', :account) }
;

ALL_SUBSCRIBERS_BILLING_DETAILS(QRY,in=subscriber,out=subscriber)=
  select s.ID @id(type=long,id), s.NAME @name, s.LIBRARY @library.id(type=long,id),
  bd.TYPE @billingDetails(discr)type, bd.ID @billingDetails.id(type=long,id),
  bd.CC_NUMBER @billingDetails.number, bd.BA_ACCOUNT @billingDetails.account
  from SUBSCRIBER s left join BILLING_DETAILS bd on s.ID = bd.SUBSCRIBER
  {= where
   {& UPPER(s.name)=:+name}
//   {& bd.TYPE = :type}
  }
  {#ID order by s.ID, bd.ID}
;
